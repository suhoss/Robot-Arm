pick_and_place:
  name: Robotics Hub Pick and Place Tests
  agent:
    type: Unity::VM
    image: robotics/ci-ubuntu20:v0.1.0pnp-796097
    flavor: i1.large
  variables:
    PATH: /root/.local/bin:/home/bokken/bin:/home/bokken/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/sbin:/home/bokken/.npm-global/bin
  commands:
    - sudo ln -s $(which python3) /usr/bin/python
    - git submodule update --init --recursive
    
    # We must remove the Demo.cs script because the System.CodeDom assembly is not in the bokken .NET sdk
    - rm ./tutorials/pick_and_place/PickAndPlaceProject/Assets/DemoScripts/Demo.*
    
    # Ensure audio is disabled. Unity built-in audio fails to initialize in our Bokken image.
    - "sed -i -e '/m_DisableAudio/ s/: .*/: 1/' ./tutorials/pick_and_place/PickAndPlaceProject/ProjectSettings/AudioManager.asset"
    - python3 -m pip install unity-downloader-cli --index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple --upgrade
    - unity-downloader-cli -u 2020.3.11f1 -c editor -c StandaloneSupport-IL2CPP -c Linux --wait --published
    - git clone git@github.cds.internal.unity3d.com:unity/utr.git utr

    # Explicitly run MessageGeneration tests first to generate dependencies
    - utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 
      --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics"
      --category=MessageGeneration
    
    # Run each category of tests in its own process, in order of increasing complexity
    - utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0
      --artifacts_path=test-results --suite=playmode --suite=editor --platform=Editor --category=UnitTests
    
    #  - utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0
    #--artifacts_path=test-results --suite=editor --platform=Editor --testfilter BuildTests.PlayerBuilder.BuildPlayerLinux
    
    - python3 .yamato/PickAndPlaceTests/set-up-integration-tests.py

    # Run Pick and Place Test
    # NOTE: Simply specifying the testCategory is not enough to get a test marked with [Explicit] to run
    # TODO: Determine how best to capture ROS logging as test artifacts
    # TODO: Determine when it would be prudent to run BuildTests and add them here or in a new config
    - |
      /bin/bash .yamato/PickAndPlaceTests/ros.bash build_pick_and_place
      /bin/bash .yamato/PickAndPlaceTests/ros.bash start_pick_and_place & 
      export PID=$!
      utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics" --testfilter IntegrationTests.PickAndPlaceIntegrationTests
      /bin/bash .yamato/PickAndPlaceTests/ros.bash stop ros1 $PID

  triggers:
    cancel_old_ci: true
    expression: |
      (pull_request.target in ["main", "dev"] AND
      NOT pull_request.changes.all match ["**/*.md","**/*.jpg","**/*.jpeg","**/*.gif","**/*.pdf"])
  artifacts:
    logs:
      paths:
        - "test-results/**/*"

{% assign rosDistros = "noetic galactic" | split: " " %}

{% for rosDistro in rosDistros %}
ros_{{rosDistro}}_integration:
  name: Robotics Hub ROS {{rosDistro}} Integration Tests
  agent:
    type: Unity::VM
    {% if rosDistro == "noetic" %}
    image: robotics/ci-ubuntu20:v0.1.0-795910
    {% elsif rosDistro == "galactic" %}
    image: robotics/ci-ros2-galactic-ubuntu20:v0.0.2-916903
    {% endif %}
    flavor: i1.large
  variables:
    PATH: /root/.local/bin:/home/bokken/bin:/home/bokken/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/sbin:/home/bokken/.npm-global/bin
  commands:
    # TODO: move to image builders
    - sudo ln -s $(which python3) /usr/bin/python
    # TODO: move to galactic image builder
    - sudo apt update && sudo apt install -y build-essential

    - git submodule update --init --recursive
    
    # We must remove the Demo.cs script because the System.CodeDom assembly is not in the bokken .NET sdk
    - rm ./tutorials/pick_and_place/PickAndPlaceProject/Assets/DemoScripts/Demo.*
    
    # Ensure audio is disabled. Unity built-in audio fails to initialize in our Bokken image.
    - "sed -i -e '/m_DisableAudio/ s/: .*/: 1/' ./tutorials/pick_and_place/PickAndPlaceProject/ProjectSettings/AudioManager.asset"
    - python3 -m pip install unity-downloader-cli --index-url https://artifactory.prd.it.unity3d.com/artifactory/api/pypi/pypi/simple --upgrade
    - unity-downloader-cli -u 2020.3.11f1 -c editor -c StandaloneSupport-IL2CPP -c Linux --wait --published
    - git clone git@github.cds.internal.unity3d.com:unity/utr.git utr

    # Explicitly run MessageGeneration tests first to generate dependencies
    - utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 
      --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics"
      --category=MessageGeneration
    
    - python3 .yamato/PickAndPlaceTests/set-up-integration-tests.py

    # Run ROS Integration Tests
    # This step requires to execute set-up-integration-tests.py
    # TODO: move ROS_DISTRO exporting to image builder
    - |
      export ROS_DISTRO=$(ls -1 /opt/ros | head -n1)
      if [ $ROS_DISTRO == "noetic" ]; then
        ROS=ros1
      elif [ $ROS_DISTRO == "galactic" ]; then
        ROS=ros2
      fi

      python3 .yamato/PickAndPlaceTests/set-up-ros-define.py $ROS

      /bin/bash .yamato/PickAndPlaceTests/ros.bash build_ros $ROS
      /bin/bash .yamato/PickAndPlaceTests/ros.bash start_ros $ROS &
      export PID=$!
      sleep 10  # Wait for ROS endpoint to stand up

      utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics" --testfilter IntegrationTests.RosIntegrationTests.RosIntegration_Publisher_Success
      
      /bin/bash .yamato/PickAndPlaceTests/ros.bash run_ros_position_service $ROS &
      export POSITION_SERVICE_PID=$!
      utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics" --testfilter IntegrationTests.RosIntegrationTests.RosIntegration_ServiceClient_Success
      /bin/bash .yamato/PickAndPlaceTests/ros.bash stop $ROS $POSITION_SERVICE_PID

      /bin/bash .yamato/PickAndPlaceTests/ros.bash run_ros_color_publisher $ROS &
      export COLOR_PUBLISHER_PID=$!
      utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics" --testfilter IntegrationTests.RosIntegrationTests.RosIntegration_Subscriber_Success
      /bin/bash .yamato/PickAndPlaceTests/ros.bash stop $ROS $COLOR_PUBLISHER_PID

      /bin/bash .yamato/PickAndPlaceTests/ros.bash run_ros_pose_service_client $ROS &
      export POSE_SERVICE_PID=$!
      utr/utr --testproject=./tutorials/pick_and_place/PickAndPlaceProject --editor-location=.Editor --reruncount=0 --artifacts_path=test-results --suite=editor --platform=Editor --extra-editor-arg="-nographics" --testfilter IntegrationTests.RosIntegrationTests.RosIntegration_ServiceServer_Success
      /bin/bash .yamato/PickAndPlaceTests/ros.bash stop $ROS $POSE_SERVICE_PID
      
      /bin/bash .yamato/PickAndPlaceTests/ros.bash stop $ROS $PID

  triggers:
    cancel_old_ci: true
    expression: |
      (pull_request.target in ["main", "dev"] AND
      NOT pull_request.changes.all match ["**/*.md","**/*.jpg","**/*.jpeg","**/*.gif","**/*.pdf"])
      OR (push.branch in ["main", "dev"])
  artifacts:
    logs:
      paths:
        - "test-results/**/*"
{% endfor %}

